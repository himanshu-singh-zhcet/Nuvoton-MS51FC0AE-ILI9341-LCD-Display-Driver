C51 COMPILER V9.60.7.0   CALIBRATE                                                         09/20/2024 18:22:23 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE CALIBRATE
OBJECT MODULE PLACED IN .\Objects\calibrate.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Src\calibrate.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Device\Include;.
                    -\Driver\inc;.\Src) DEBUG OBJECTEXTEND PRINT(.\Listings\calibrate.lst) TABS(2) OBJECT(.\Objects\calibrate.obj)

line level    source

   1          #include "calibrate.h"
   2          
   3          int setCalibrationMatrix(POINT_T * displayPtr,POINT_T * screenPtr,MATRIX * matrixPtr){
   4   1          int  retValue = OK;
   5   1          matrixPtr->Divider = ((screenPtr[0].x - screenPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) -
   6   1                               ((screenPtr[1].x - screenPtr[2].x) * (screenPtr[0].y - screenPtr[2].y));
   7   1      
   8   1          if( matrixPtr->Divider == 0 ){
   9   2              retValue = NOT_OK ;
  10   2          }
  11   1          else{
  12   2              matrixPtr->An = ((displayPtr[0].x - displayPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) -
  13   2                              ((displayPtr[1].x - displayPtr[2].x) * (screenPtr[0].y - screenPtr[2].y)) ;
  14   2      
  15   2              matrixPtr->Bn = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].x - displayPtr[2].x)) -
  16   2                              ((displayPtr[0].x - displayPtr[2].x) * (screenPtr[1].x - screenPtr[2].x)) ;
  17   2      
  18   2              matrixPtr->Cn = (screenPtr[2].x * displayPtr[1].x - screenPtr[1].x * displayPtr[2].x) * screenPtr[
             -0].y +
  19   2                              (screenPtr[0].x * displayPtr[2].x - screenPtr[2].x * displayPtr[0].x) * screenPtr[
             -1].y +
  20   2                              (screenPtr[1].x * displayPtr[0].x - screenPtr[0].x * displayPtr[1].x) * screenPtr[
             -2].y ;
  21   2      
  22   2              matrixPtr->Dn = ((displayPtr[0].y - displayPtr[2].y) * (screenPtr[1].y - screenPtr[2].y)) -
  23   2                              ((displayPtr[1].y - displayPtr[2].y) * (screenPtr[0].y - screenPtr[2].y)) ;
  24   2      
  25   2              matrixPtr->En = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].y - displayPtr[2].y)) -
  26   2                              ((displayPtr[0].y - displayPtr[2].y) * (screenPtr[1].x - screenPtr[2].x)) ;
  27   2      
  28   2              matrixPtr->Fn = (screenPtr[2].x * displayPtr[1].y - screenPtr[1].x * displayPtr[2].y) * screenPtr[
             -0].y +
  29   2                              (screenPtr[0].x * displayPtr[2].y - screenPtr[2].x * displayPtr[0].y) * screenPtr[
             -1].y +
  30   2                              (screenPtr[1].x * displayPtr[0].y - screenPtr[0].x * displayPtr[1].y) * screenPtr[
             -2].y ;
  31   2          }
  32   1      
  33   1          return (retValue) ;
  34   1      }
  35          
  36           /* end of setCalibrationMatrix() */
  37          
  38          
  39          
  40          /**********************************************************************
  41           *
  42           *     Function: getDisplayPoint()
  43           *
  44           *  Description: Given a valid set of calibration factors and a point
  45           *                value reported by the touch screen, this function
  46           *                calculates and returns the true (or closest to true)
  47           *                display point below the spot where the touch screen
  48           *                was touched.
C51 COMPILER V9.60.7.0   CALIBRATE                                                         09/20/2024 18:22:23 PAGE 2   

  49           *
  50           *
  51           *
  52           *  Argument(s): displayPtr (output) - Pointer to the calculated
  53           *                                      (true) display point.
  54           *               screenPtr (input) - Pointer to the reported touch
  55           *                                    screen point.
  56           *               matrixPtr (input) - Pointer to calibration factors
  57           *                                    matrix previously calculated
  58           *                                    from a call to
  59           *                                    setCalibrationMatrix()
  60           *
  61           *
  62           *  The function simply solves for Xd and Yd by implementing the
  63           *   computations required by the translation matrix.
  64           *
  65           *                                              /-     -\
  66           *              /-    -\     /-            -\   |       |
  67           *              |      |     |              |   |   Xs  |
  68           *              |  Xd  |     | A    B    C  |   |       |
  69           *              |      |  =  |              | * |   Ys  |
  70           *              |  Yd  |     | D    E    F  |   |       |
  71           *              |      |     |              |   |   1   |
  72           *              \-    -/     \-            -/   |       |
  73           *                                              \-     -/
  74           *
  75           *  It must be kept brief to avoid consuming CPU cycles.
  76           *
  77           *
  78           *       Return: OK - the display point was correctly calculated
  79           *                     and its value is in the output argument.
  80           *               NOT_OK - an error was detected and the function
  81           *                         failed to return a valid point.
  82           *
  83           *
  84           *
  85           *                 NOTE!    NOTE!    NOTE!
  86           *
  87           *  setCalibrationMatrix() and getDisplayPoint() will do fine
  88           *  for you as they are, provided that your digitizer
  89           *  resolution does not exceed 10 bits (1024 values).  Higher
  90           *  resolutions may cause the integer operations to overflow
  91           *  and return incorrect values.  If you wish to use these
  92           *  functions with digitizer resolutions of 12 bits (4096
  93           *  values) you will either have to a) use 64-bit signed
  94           *  integer variables and math, or b) judiciously modify the
  95           *  operations to scale results by a factor of 2 or even 4.
  96           *
  97           *
  98           */
  99          int getDisplayPoint(POINT_T *displayPtr,POINT_T *screenPtr,MATRIX *matrixPtr){
 100   1          int retValue = OK ;
 101   1          if( matrixPtr->Divider != 0 ){
 102   2              /* Operation order is important since we are doing integer */
 103   2              /*  math. Make sure you add all terms together before      */
 104   2              /*  dividing, so that the remainder is not rounded off     */
 105   2              /*  prematurely.                                           */
 106   2      
 107   2              displayPtr->x = ( (matrixPtr->An * screenPtr->x) +
 108   2                                (matrixPtr->Bn * screenPtr->y) +
 109   2                                 matrixPtr->Cn
 110   2                              ) / matrixPtr->Divider ;
C51 COMPILER V9.60.7.0   CALIBRATE                                                         09/20/2024 18:22:23 PAGE 3   

 111   2      
 112   2              displayPtr->y = ( (matrixPtr->Dn * screenPtr->x) +
 113   2                                (matrixPtr->En * screenPtr->y) +
 114   2                                 matrixPtr->Fn
 115   2                              ) / matrixPtr->Divider ;
 116   2          }
 117   1          else{
 118   2              retValue = NOT_OK;
 119   2          }
 120   1      
 121   1          return (retValue);
 122   1      } /* end of getDisplayPoint() */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2983    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      22
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
