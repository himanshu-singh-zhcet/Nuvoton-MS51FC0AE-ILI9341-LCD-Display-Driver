C51 COMPILER V9.60.7.0   EEPROM                                                            09/12/2024 18:28:54 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE EEPROM
OBJECT MODULE PLACED IN .\Objects\eeprom.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Driver\src\eeprom.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Device\Inclu
                    -de;.\Driver\inc;.\Src) DEBUG OBJECTEXTEND PRINT(.\Listings\eeprom.lst) TABS(2) OBJECT(.\Objects\eeprom.obj)

line level    source

   1          /*--------------------------------------------------------------------------------------------------------
             --*/
   2          /*                                                                                                        
             - */
   3          /* SPDX-License-Identifier: Apache-2.0                                                                    
             - */
   4          /* Copyright(c) 2020 Nuvoton Technology Corp. All rights reserved.                                        
             - */
   5          /*                                                                                                        
             - */
   6          /*--------------------------------------------------------------------------------------------------------
             --*/
   7          
   8          //********************************************************************************************************
             -***
   9          //  Website: http://www.nuvoton.com
  10          //  E-Mail : MicroC-8bit@nuvoton.com
  11          //********************************************************************************************************
             -***
  12          #include "MS51_32K.h"
  13          
  14          volatile unsigned char xdata page_buffer[128];
  15          
  16          /**
  17           * @brief       Write Dataflash as EEPROM,
  18           * @param       u16EPAddr the 16bit EEPROM start address. Any of APROM address can be defined as start add
             -ress (0x3800)
  19           * @param       u8EPData the 8bit value need storage in (0x3800)
  20           * @return      none
  21           * @details     Storage dataflash page data into XRAM 380H-400H, modify data in XRAM, Erase dataflash page
             -, writer updated XRAM data into dataflash
  22           */
  23          void Write_DATAFLASH_BYTE(unsigned int u16EPAddr, unsigned char u8EPData)
  24          {
  25   1          unsigned char looptmp = 0;
  26   1          unsigned int u16_addrl_r;
  27   1          unsigned int RAMtmp;
  28   1      
  29   1          //Check page start address
  30   1          u16_addrl_r = (u16EPAddr / 128) * 128;
  31   1      
  32   1          //Save APROM data to XRAM0
  33   1          for (looptmp = 0; looptmp < 0x80; looptmp++)
  34   1          {
  35   2              RAMtmp = Read_APROM_BYTE((unsigned int code *)(u16_addrl_r + looptmp));
  36   2              page_buffer[looptmp] = RAMtmp;
  37   2          }
  38   1      
  39   1          // Modify customer data in XRAM
  40   1          page_buffer[u16EPAddr & 0x7f] = u8EPData;
  41   1      
  42   1          //Erase APROM DATAFLASH page
  43   1          IAPAL = u16_addrl_r & 0xff;
  44   1          IAPAH = (u16_addrl_r >> 8) & 0xff;
C51 COMPILER V9.60.7.0   EEPROM                                                            09/12/2024 18:28:54 PAGE 2   

  45   1          IAPFD = 0xFF;
  46   1          set_CHPCON_IAPEN;
  47   1          set_IAPUEN_APUEN;
  48   1          IAPCN = 0x22;
  49   1          set_IAPTRG_IAPGO;
  50   1      
  51   1          //Save changed RAM data to APROM DATAFLASH
  52   1          set_CHPCON_IAPEN;
  53   1          set_IAPUEN_APUEN;
  54   1          IAPCN = 0x21;
  55   1      
  56   1          for (looptmp = 0; looptmp < 0x80; looptmp++)
  57   1          {
  58   2              IAPAL = (u16_addrl_r & 0xff) + looptmp;
  59   2              IAPAH = (u16_addrl_r >> 8) & 0xff;
  60   2              IAPFD = page_buffer[looptmp];
  61   2              set_IAPTRG_IAPGO;
  62   2          }
  63   1      
  64   1          clr_IAPUEN_APUEN;
  65   1          clr_CHPCON_IAPEN;
  66   1      }
  67          
  68          
  69          //-------------------------------------------------------------------------
  70          void Write_DATAFLASH_ARRAY(unsigned int u16_addr, unsigned char *pDat, unsigned int num)
  71          {
  72   1          unsigned char CPageAddr, EPageAddr, cnt;
  73   1          CPageAddr = u16_addr >> 7;
  74   1          EPageAddr = (u16_addr + num) >> 7;
  75   1      
  76   1          while (CPageAddr != EPageAddr)
  77   1          {
  78   2              cnt = WriteDataToOnePage(u16_addr, pDat, 128);
  79   2              u16_addr += cnt;
  80   2              pDat += cnt;
  81   2              num -= cnt;
  82   2              CPageAddr = u16_addr >> 7;
  83   2          }
  84   1      
  85   1          if (num)
  86   1          {
  87   2              WriteDataToOnePage(u16_addr, pDat, num);
  88   2          }
  89   1      }
  90          //-------------------------------------------------------------------------
  91          void Read_DATAFLASH_ARRAY(unsigned int u16_addr, unsigned char *pDat, unsigned int num)
  92          {
  93   1          unsigned int i;
  94   1      
  95   1          for (i = 0; i < num; i++)
  96   1              pDat[i] = *(unsigned char code *)(u16_addr + i);
  97   1      }
  98          
  99          //--------------------------------------------------------------------------------------------------------
             ----
 100          unsigned char WriteDataToOnePage(unsigned int u16_addr, const unsigned char *pDat, unsigned char num)
 101          {
 102   1          unsigned char i, offset;
 103   1          unsigned char code *pCode;
 104   1          unsigned char xdata xd_tmp[128];
 105   1      
C51 COMPILER V9.60.7.0   EEPROM                                                            09/12/2024 18:28:54 PAGE 3   

 106   1          set_CHPCON_IAPEN;
 107   1          set_IAPUEN_APUEN;
 108   1      
 109   1          offset = u16_addr & 0x007F;
 110   1          i = PAGE_SIZE - offset;
 111   1      
 112   1          if (num > i)num = i;
 113   1      
 114   1          pCode = (unsigned char code *)u16_addr;
 115   1      
 116   1          for (i = 0; i < num; i++)
 117   1          {
 118   2              if (pCode[i] != 0xFF)break;
 119   2          }
 120   1      
 121   1          if (i == num)
 122   1          {
 123   2              IAPCN = BYTE_PROGRAM_APROM;
 124   2              IAPAL = u16_addr;
 125   2              IAPAH = u16_addr >> 8;
 126   2      
 127   2              for (i = 0; i < num; i++)
 128   2              {
 129   3                  IAPFD = pDat[i];
 130   3                  set_IAPTRG_IAPGO;
 131   3                  IAPAL++;
 132   3              }
 133   2      
 134   2              for (i = 0; i < num; i++)
 135   2              {
 136   3                  if (pCode[i] != pDat[i])break;
 137   3              }
 138   2      
 139   2              if (i != num) goto WriteDataToPage20;
 140   2          }
 141   1          else
 142   1          {
 143   2      WriteDataToPage20:
 144   2              pCode = (unsigned char code *)(u16_addr & 0xff80);
 145   2      
 146   2              for (i = 0; i < 128; i++)
 147   2              {
 148   3                  xd_tmp[i] = pCode[i];
 149   3              }
 150   2      
 151   2              for (i = 0; i < num; i++)
 152   2              {
 153   3                  xd_tmp[offset + i] = pDat[i];
 154   3              }
 155   2      
 156   2              do
 157   2              {
 158   3                  IAPAL = (u16_addr & 0xff80);
 159   3                  IAPAH = u16_addr >> 8;
 160   3                  IAPCN = PAGE_ERASE_APROM;
 161   3                  IAPFD = 0xFF;
 162   3                  set_IAPTRG_IAPGO;
 163   3                  IAPCN = BYTE_PROGRAM_APROM;
 164   3      
 165   3                  for (i = 0; i < 128; i++)
 166   3                  {
 167   4                      IAPFD = xd_tmp[i];
C51 COMPILER V9.60.7.0   EEPROM                                                            09/12/2024 18:28:54 PAGE 4   

 168   4                      set_IAPTRG_IAPGO;
 169   4                      IAPAL++;
 170   4                  }
 171   3      
 172   3                  for (i = 0; i < 128; i++)
 173   3                  {
 174   4                      if (pCode[i] != xd_tmp[i])break;
 175   4                  }
 176   3              } while (i != 128);
 177   2      
 178   2          }
 179   1      
 180   1          clr_CHPCON_IAPEN;
 181   1      
 182   1          return num;
 183   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1302    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    128     161
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
