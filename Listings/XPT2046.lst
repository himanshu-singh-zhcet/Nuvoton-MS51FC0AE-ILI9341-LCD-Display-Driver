C51 COMPILER V9.60.7.0   XPT2046                                                           09/20/2024 18:22:23 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE XPT2046
OBJECT MODULE PLACED IN .\Objects\XPT2046.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Src\XPT2046.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Device\Include;.\D
                    -river\inc;.\Src) DEBUG OBJECTEXTEND PRINT(.\Listings\XPT2046.lst) TABS(2) OBJECT(.\Objects\XPT2046.obj)

line level    source

   1          #include "XPT2046.h"
   2          #include "spi.h"
   3          #include <stdio.h>
   4          #include <stdlib.h>
   5          
   6          #define XPT2046_CS_LOW   P16 = 0  // Chip Select Low
   7          #define XPT2046_CS_HIGH  P16 = 1  // Chip Select High
   8          
   9          static MATRIX matrix;
  10          
  11          static uint8_t GetPointRaw(uint16_t* x, uint16_t* y);
  12          
  13          static void delay(unsigned int count){
  14   1          unsigned int i;
  15   1          while (count--){
  16   2              for (i = 0; i < 1000; i++);
  17   2          }
  18   1      }
  19          
  20          void XPT2046_Write(uint8_t dat){
  21   1        XPT2046_CS_LOW;    // Select the Touch
  22   1          Spi_Write_Byte(dat);
  23   1          XPT2046_CS_HIGH;   // Deselect the Touch
  24   1      }
  25          
  26          uint8_t XPT2046_Read(uint8_t dat){
  27   1        uint8_t result;
  28   1        result = Spi_Read_Byte(dat);
  29   1        return result;
  30   1      }
  31          
  32          static uint8_t GetPointRaw(uint16_t* x, uint16_t* y){
  33   1        uint8_t i;
  34   1        uint8_t sorted;
  35   1        uint16_t swap_value;
  36   1        uint16_t x_raw;
  37   1        uint16_t y_raw;
  38   1        uint16_t databuffer[2][MW_HAL_TOUCH_READ_POINTS_COUNT];
  39   1        uint8_t touch_count;
  40   1      
  41   1        if (!TouchIsTouched()){
  42   2          return false;
  43   2        }
  44   1      
  45   1        // get set of readings
  46   1        XPT2046_CS_LOW;
  47   1        touch_count = 0U;
  48   1        do
  49   1        {
  50   2          XPT2046_Write(COMMAND_READ_X);
  51   2          x_raw = (uint16_t)XPT2046_Read(0) << 8;
  52   2          x_raw |= (uint16_t)XPT2046_Read(0);
  53   2          x_raw >>= 3;
  54   2      
C51 COMPILER V9.60.7.0   XPT2046                                                           09/20/2024 18:22:23 PAGE 2   

  55   2          XPT2046_Write(COMMAND_READ_Y);
  56   2          y_raw = (uint16_t)XPT2046_Read(0) << 8;
  57   2          y_raw |= (uint16_t)XPT2046_Read(0);
  58   2          y_raw >>= 3;
  59   2      
  60   2          databuffer[0][touch_count] = x_raw;
  61   2          databuffer[1][touch_count] = y_raw;
  62   2          touch_count++;
  63   2        }
  64   1        while (TouchIsTouched() == true && touch_count < MW_HAL_TOUCH_READ_POINTS_COUNT);
  65   1        XPT2046_CS_HIGH;
  66   1      
  67   1        // check that the touch was held down during all the readings
  68   1        if (touch_count != MW_HAL_TOUCH_READ_POINTS_COUNT){
  69   2          return (false);
  70   2        }
  71   1      
  72   1        // sort the x readings
  73   1        do
  74   1        {
  75   2          sorted = true;
  76   2          for (i = 0U; i < touch_count - 1U; i++){
  77   3            if(databuffer[0][i] > databuffer[0][i + 1U]){
  78   4              swap_value = databuffer[0][i + 1U];
  79   4              databuffer[0][i + 1U] = databuffer[0][i];
  80   4              databuffer[0][i] = swap_value;
  81   4              sorted = false;
  82   4            }
  83   3          }
  84   2        }
  85   1        while (!sorted);
  86   1      
  87   1        // sort the y readings
  88   1        do
  89   1        {
  90   2          sorted = true;
  91   2          for (i = 0U; i < touch_count - 1U; i++){
  92   3            if (databuffer[1][i] > databuffer[1][i + 1U]){
  93   4              swap_value = databuffer[1][i + 1U];
  94   4              databuffer[1][i + 1U] = databuffer[1][i];
  95   4              databuffer[1][i] = swap_value;
  96   4              sorted = false;
  97   4            }
  98   3          }
  99   2        }
 100   1        while (!sorted);
 101   1      
 102   1        // take averaged middle 2 readings
 103   1        *x = (databuffer[0][4] + databuffer[0][5]) / 2U;
 104   1        *y = (databuffer[1][4] + databuffer[1][5]) / 2U;
 105   1      
 106   1        return (true);
 107   1      }
 108          
 109          uint8_t TouchIsTouched(void){
 110   1        
 111   1        return  P17 == 0;
 112   1      }
 113          
 114          uint8_t TouchGetCalibratedPoint(uint16_t* x, uint16_t* y){
 115   1        POINT_T raw_point;
 116   1        POINT_T display_point;
C51 COMPILER V9.60.7.0   XPT2046                                                           09/20/2024 18:22:23 PAGE 3   

 117   1        uint16_t raw_x;
 118   1        uint16_t raw_y;
 119   1      
 120   1        // get raw reading
 121   1        if (GetPointRaw(&raw_x, &raw_y) == false){
 122   2          return false;
 123   2        }
 124   1      
 125   1        raw_point.x = (uint32_t)raw_x;
 126   1        raw_point.y = (uint32_t)raw_y;
 127   1      
 128   1        // apply calibration matrix
 129   1        (void)getDisplayPoint(&display_point, &raw_point, &matrix);
 130   1      
 131   1        // range check results
 132   1        if (display_point.x > 239){
 133   2          display_point.x = 239;
 134   2        }
 135   1        if (display_point.y > 319){
 136   2          display_point.y = 319;
 137   2        }
 138   1      
 139   1        if (display_point.x < 0){
 140   2          display_point.x = 0;
 141   2        }
 142   1        if (display_point.y < 0){
 143   2          display_point.y = 0;
 144   2        }
 145   1      
 146   1        *x = (uint16_t)display_point.x;
 147   1        *y = (uint16_t)display_point.y;
 148   1      
 149   1        return true;
 150   1      }
 151          
 152          void TouchCalibrate(void){
 153   1      //  uint16_t x;
 154   1      //  uint16_t y;
 155   1        POINT_T raw_points[3];
 156   1        POINT_T display_points[3] = {{40, 40}, {200, 40}, {200, 280}};
 157   1      
 158   1          /* first point */
 159   1      //  DrawCross(40, 40, 40);
 160   1      //  while (TouchIsTouched() == false)
 161   1      //  {
 162   1      //  }
 163   1      //  while (GetPointRaw(&x, &y) == false)
 164   1      //  {
 165   1      //  }
 166   1      //  raw_points[0].x = (INT_32)x;
 167   1      //  raw_points[0].y = (INT_32)y;
 168   1      //
 169   1      //
 170   1      //
 171   1      //  while (TouchIsTouched() == true)
 172   1      //  {
 173   1      //  }
 174   1      //
 175   1      //    /* second point */
 176   1      //  DrawCross(200, 40, 40);
 177   1      //  while (TouchIsTouched() == false)
 178   1      //  {
C51 COMPILER V9.60.7.0   XPT2046                                                           09/20/2024 18:22:23 PAGE 4   

 179   1      //  }
 180   1      //  while (GetPointRaw(&x, &y) == false)
 181   1      //  {
 182   1      //  }
 183   1      //  raw_points[1].x = (INT_32)x;
 184   1      //  raw_points[1].y = (INT_32)y;
 185   1      //
 186   1      ////  char buf[20];
 187   1      //
 188   1      //
 189   1      //  while (TouchIsTouched() == true)
 190   1      //  {
 191   1      //  }
 192   1      //
 193   1      //    /* third point */
 194   1      //  DrawCross(200, 280, 40);
 195   1      //  while (TouchIsTouched() == false)
 196   1      //  {
 197   1      //  }
 198   1      //  while (GetPointRaw(&x, &y) == false)
 199   1      //  {
 200   1      //  }
 201   1      
 202   1        raw_points[0].x = 3183;
 203   1        raw_points[0].y = 601;
 204   1      
 205   1        raw_points[1].x = 778;
 206   1        raw_points[1].y = 599;
 207   1      
 208   1        raw_points[2].x = 824;
 209   1        raw_points[2].y = 3189;
 210   1      
 211   1      //  char buf[20];
 212   1      //  char buf[20];
 213   1      //  sprintf(buf, "%3ld %3ld", raw_points[0].x, raw_points[0].y);
 214   1      //  GraphicsLargeString(0, 0, buf, BLACK);
 215   1      //
 216   1      //  sprintf(buf, "%3ld %3ld", raw_points[1].x, raw_points[1].y);
 217   1      //  GraphicsLargeString(0, 75, buf, BLACK);
 218   1      //
 219   1      //  sprintf(buf, "%3ld %3ld", raw_points[2].x, raw_points[2].y);
 220   1      //  GraphicsLargeString(0, 150, buf, BLACK);
 221   1      //  while (TouchIsTouched() == true)
 222   1      //  {
 223   1      //  }
 224   1      
 225   1        (void)setCalibrationMatrix(display_points, raw_points, &matrix);
 226   1      }
 227          
 228          
 229          
 230          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1071    ----
   CONSTANT SIZE    =     24    ----
   XDATA SIZE       =     28     127
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
C51 COMPILER V9.60.7.0   XPT2046                                                           09/20/2024 18:22:23 PAGE 5   

END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
