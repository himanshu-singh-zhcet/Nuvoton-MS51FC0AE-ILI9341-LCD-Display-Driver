C51 COMPILER V9.60.7.0   IOTFYI2C                                                          09/12/2024 17:56:57 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE IOTFYI2C
OBJECT MODULE PLACED IN .\Objects\iotfyI2c.obj
COMPILER INVOKED BY: C:\Users\shash\AppData\Local\Keil_v5\C51\BIN\C51.EXE Src\iotfyI2c.c LARGE OPTIMIZE(8,SPEED) BROWSE 
                    -INCDIR(.\Device\Include;.\Driver\inc;.\Src) DEBUG OBJECTEXTEND PRINT(.\Listings\iotfyI2c.lst) TABS(2) OBJECT(.\Objects\i
                    -otfyI2c.obj)

line level    source

   1          #include "common.h"
   2          #include "MS51_32K.H"
   3          #include "iotfyI2c.h"
   4          
   5          void Init_I2C(void) {
   6   1      
   7   1          P13_OPENDRAIN_MODE;          // Modify SCL pin to Open drain mode. don't forget the pull high resister
             - in circuit
   8   1          P14_OPENDRAIN_MODE;          // Modify SDA pin to Open drain mode. don't forget the pull high resister
             - in circuit    
   9   1          
  10   1        /* Set I2C clock rate
  11   1              I2CLK = (u32SYSCLK/4/u32I2CCLK-1);
  12   1              I2CLK = (24MHz/4/100KHz-1);
  13   1          */
  14   1      
  15   1          I2CLK = I2C_CLOCK; 
  16   1          /* Enable I2C */
  17   1          set_I2CON_I2CEN;                                   
  18   1      }
  19          
  20          void I2C_SI_Check(void) {
  21   1      
  22   1          if(I2STAT!= 0x00) {
  23   2              return;
  24   2          }
  25   1      
  26   1          //At Error
  27   1          set_I2CON_STO;
  28   1          clr_I2CON_SI;
  29   1          
  30   1          if(I2CON&SET_BIT3) {
  31   2              clr_I2CON_I2CEN;
  32   2              set_I2CON_I2CEN;
  33   2              clr_I2CON_SI;
  34   2              clr_I2CON_I2CEN;    
  35   2          }
  36   1      }
  37          
  38          unsigned char I2C_start(void) {
  39   1        set_I2CON_STA;                                    /* Send Start bit to I2C EEPROM */
  40   1          clr_I2CON_SI;
  41   1        
  42   1          while(SI == 0);
  43   1      
  44   1          if(I2STAT!= 0x08) {
  45   2              return false;
  46   2          }
  47   1          return true;
  48   1      }
  49          
  50          unsigned char I2C_stop(void) {
  51   1      
C51 COMPILER V9.60.7.0   IOTFYI2C                                                          09/12/2024 17:56:57 PAGE 2   

  52   1          set_I2CON_STO;
  53   1          clr_I2CON_SI;
  54   1      
  55   1          /* Check STOP signal */
  56   1          while (I2CON&SET_BIT4) {
  57   2              if(I2STAT == 0x00) {
  58   3                  return false;
  59   3              }
  60   2          }
  61   1      
  62   1          return true;
  63   1      }
  64          
  65          unsigned char I2C_Read_Ack(char *value) {
  66   1      
  67   1          set_I2CON_AA;
  68   1          clr_I2CON_SI;
  69   1      
  70   1          while(SI == 0);
  71   1          /* 0x50:Data byte has been received; NOT ACK has been returned */
  72   1          if (I2STAT != 0x50) {
  73   2              return false;
  74   2          }
  75   1      
  76   1          *value = I2DAT;
  77   1          return true;
  78   1      }
  79          
  80          unsigned char I2C_Read_Nack(char *value) {
  81   1          
  82   1          clr_I2CON_AA;
  83   1          clr_I2CON_SI;
  84   1      
  85   1          while(SI == 0);
  86   1      
  87   1          *value = 0x00;
  88   1          /* 0x58:Data byte has been received; ACK has been returned */
  89   1          if (I2STAT != 0x58) {
  90   2              return false;
  91   2          }
  92   1          return true;
  93   1      }
  94          
  95          unsigned char I2C_WriteData(unsigned char value) {
  96   1          I2DAT = value; 
  97   1          clr_I2CON_SI;
  98   1          while (!(I2CON&SET_BIT3));               /*Wait SI to be 1 */
  99   1           /* 0x28:  Data byte in S1DAT has been transmitted; ACK has been received */
 100   1          if (I2STAT != 0x28) {
 101   2              return false;
 102   2          }
 103   1          return true;
 104   1      }
 105          
 106          unsigned char I2CSendSlaveWriteStart(unsigned char addr) {
 107   1          uint8_t tempData = ((addr << 1) & CLR_BIT0);
 108   1          clr_I2CON_STA;                  /* Clear STA and Keep SI value in I2CON */
 109   1          I2DAT = tempData;               /* Send (SLA+W) */
 110   1          clr_I2CON_SI;
 111   1          while (!(I2CON&SET_BIT3));      /*Wait SI to be 1 */
 112   1      
 113   1          /* 0x18: SLA+W has been transmitted; ACK has been received */
C51 COMPILER V9.60.7.0   IOTFYI2C                                                          09/12/2024 17:56:57 PAGE 3   

 114   1          if (I2STAT != 0x18) {
 115   2              return false;
 116   2          }
 117   1      
 118   1          return true;
 119   1      }
 120          
 121          unsigned char I2CSendSlaveRead(unsigned char addr) {
 122   1          uint8_t tempData = ((addr << 1) | SET_BIT0);
 123   1          clr_I2CON_STA;                 /* Clear STA and Keep SI value in I2CON */
 124   1      
 125   1          I2DAT = tempData;              /* Send (SLA + R) */
 126   1          clr_I2CON_SI;
 127   1          while (!(I2CON&SET_BIT3));     /* wait SI to be 1 */
 128   1      
 129   1          /* 0x40:  SLA+R has been transmitted; ACK has been received */
 130   1          if (I2STAT != 0x40) {
 131   2              return false;
 132   2          }
 133   1          
 134   1          return true;
 135   1      }
 136          
 137          unsigned char sendRepeatStart() {
 138   1          /* Step5 */
 139   1          set_I2CON_STA;                           /* Repeated START */
 140   1          clr_I2CON_SI; 
 141   1          while (!(I2CON&SET_BIT3));
 142   1      
 143   1          /* 0x10: A repeated START condition has been transmitted */
 144   1          if (I2STAT != 0x10) {
 145   2              return false;
 146   2          }
 147   1      
 148   1          return true;
 149   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    249    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
