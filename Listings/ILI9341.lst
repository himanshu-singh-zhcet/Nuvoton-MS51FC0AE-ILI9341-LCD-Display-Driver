C51 COMPILER V9.60.7.0   ILI9341                                                           04/14/2025 22:12:06 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE ILI9341
OBJECT MODULE PLACED IN .\Objects\ILI9341.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Src\ILI9341.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Device\Include;.\D
                    -river\inc;.\Src) DEBUG OBJECTEXTEND PRINT(.\Listings\ILI9341.lst) TABS(2) OBJECT(.\Objects\ILI9341.obj)

line level    source

   1          
   2          #include "ILI9341.h"
   3          #include "spi.h"
   4          #include <stdio.h>
   5          #include <stdlib.h>
   6          
   7          #define ILI9341_CS_LOW    P15 = 0   // Chip Select low
   8          #define ILI9341_CS_HIGH   P15 = 1   // Chip Select high
   9          #define ILI9341_DC_LOW    P11 = 0   // Data/Command low for command
  10          #define ILI9341_DC_HIGH   P11 = 1   // Data/Command high for data
  11          #define ILI9341_RST_LOW   P12 = 0   // Reset low
  12          #define ILI9341_RST_HIGH  P12 = 1   // Reset high
  13          
  14          volatile uint32_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
  15          volatile uint32_t LCD_WIDTH  = ILI9341_SCREEN_WIDTH;
  16          
  17          
  18          static void swap(uint16_t *a, uint16_t *b) {
  19   1          uint16_t temp = *a;
  20   1          *a = *b;
  21   1          *b = temp;
  22   1      }
  23          
  24          static void delay(unsigned int count){
  25   1          unsigned int i;
  26   1          while (count--){
  27   2              for (i = 0; i < 1000; i++);
  28   2          }
  29   1      }
  30          
  31          void ILI9341_WriteCommand(uint8_t cmd){
  32   1        ILI9341_DC_LOW;    // Command mode
  33   1          ILI9341_CS_LOW;    // Select the display
  34   1          Spi_Write_Byte(cmd);
  35   1          ILI9341_CS_HIGH;   // Deselect the display
  36   1      }
  37          
  38          void ILI9341_WriteData(uint8_t dat){
  39   1        ILI9341_DC_HIGH;   // Data mode
  40   1          ILI9341_CS_LOW;    // Select the display
  41   1          Spi_Write_Byte(dat);
  42   1          ILI9341_CS_HIGH;   // Deselect the display
  43   1      }
  44          
  45          
  46          void ILI9341_WriteBuffer(uint8_t *buffer, uint16_t len){
  47   1        ILI9341_DC_HIGH;   // Data mode
  48   1          ILI9341_CS_LOW;    // Select the display
  49   1        Spi_Write_Buff(buffer,len);
  50   1          ILI9341_CS_HIGH;   // Deselect the display
  51   1      }
  52          
  53          void ILI9341_SetAddress(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2){
  54   1        uint8_t buffer[4];
C51 COMPILER V9.60.7.0   ILI9341                                                           04/14/2025 22:12:06 PAGE 2   

  55   1        buffer[0] = x1 >> 8;
  56   1        buffer[1] = x1;
  57   1        buffer[2] = x2 >> 8;
  58   1        buffer[3] = x2;
  59   1      
  60   1        ILI9341_WriteCommand(0x2A);
  61   1        ILI9341_WriteBuffer(buffer, sizeof(buffer));
  62   1      
  63   1        buffer[0] = y1 >> 8;
  64   1        buffer[1] = y1;
  65   1        buffer[2] = y2 >> 8;
  66   1        buffer[3] = y2;
  67   1      
  68   1        ILI9341_WriteCommand(0x2B);
  69   1        ILI9341_WriteBuffer(buffer, sizeof(buffer));
  70   1        ILI9341_WriteCommand(0x2C);
  71   1      }
  72          
  73          void ILI9341_Reset(void){
  74   1        ILI9341_RST_LOW;  //Disable
  75   1        delay(10);
  76   1        ILI9341_CS_LOW;   //Select
  77   1        delay(10);
  78   1        ILI9341_RST_HIGH;   //Enable
  79   1        ILI9341_CS_HIGH;  //Deselect
  80   1      }
  81          
  82          void ILI9341_Enable(void){
  83   1        ILI9341_RST_HIGH;   //Enable
  84   1      }
  85          
  86          void ILI9341_Init(void){
  87   1        ILI9341_Enable();
  88   1        ILI9341_Reset();
  89   1      
  90   1        //SOFTWARE RESET
  91   1        ILI9341_WriteCommand(0x01);
  92   1        delay(10);
  93   1      
  94   1        //POWER CONTROL A
  95   1        ILI9341_WriteCommand(0xCB);
  96   1        ILI9341_WriteData(0x39);
  97   1        ILI9341_WriteData(0x2C);
  98   1        ILI9341_WriteData(0x00);
  99   1        ILI9341_WriteData(0x34);
 100   1        ILI9341_WriteData(0x02);
 101   1      
 102   1        //POWER CONTROL B
 103   1        ILI9341_WriteCommand(0xCF);
 104   1        ILI9341_WriteData(0x00);
 105   1        ILI9341_WriteData(0xC1);
 106   1        ILI9341_WriteData(0x30);
 107   1      
 108   1        //DRIVER TIMING CONTROL A
 109   1        ILI9341_WriteCommand(0xE8);
 110   1        ILI9341_WriteData(0x85);
 111   1        ILI9341_WriteData(0x00);
 112   1        ILI9341_WriteData(0x78);
 113   1      
 114   1        //DRIVER TIMING CONTROL B
 115   1        ILI9341_WriteCommand(0xEA);
 116   1        ILI9341_WriteData(0x00);
C51 COMPILER V9.60.7.0   ILI9341                                                           04/14/2025 22:12:06 PAGE 3   

 117   1        ILI9341_WriteData(0x00);
 118   1      
 119   1        //POWER ON SEQUENCE CONTROL
 120   1        ILI9341_WriteCommand(0xED);
 121   1        ILI9341_WriteData(0x64);
 122   1        ILI9341_WriteData(0x03);
 123   1        ILI9341_WriteData(0x12);
 124   1        ILI9341_WriteData(0x81);
 125   1      
 126   1        //PUMP RATIO CONTROL
 127   1        ILI9341_WriteCommand(0xF7);
 128   1        ILI9341_WriteData(0x20);
 129   1      
 130   1        //POWER CONTROL,VRH[5:0]
 131   1        ILI9341_WriteCommand(0xC0);
 132   1        ILI9341_WriteData(0x23);
 133   1      
 134   1        //POWER CONTROL,SAP[2:0];BT[3:0]
 135   1        ILI9341_WriteCommand(0xC1);
 136   1        ILI9341_WriteData(0x10);
 137   1      
 138   1        //VCM CONTROL
 139   1        ILI9341_WriteCommand(0xC5);
 140   1        ILI9341_WriteData(0x3E);
 141   1        ILI9341_WriteData(0x28);
 142   1      
 143   1        //VCM CONTROL 2
 144   1        ILI9341_WriteCommand(0xC7);
 145   1        ILI9341_WriteData(0x86);
 146   1      
 147   1        //MEMORY ACCESS CONTROL
 148   1        ILI9341_WriteCommand(0x36);
 149   1        ILI9341_WriteData(0x48);
 150   1      
 151   1        //PIXEL FORMAT
 152   1        ILI9341_WriteCommand(0x3A);
 153   1        ILI9341_WriteData(0x55);
 154   1      
 155   1        //FRAME RATIO CONTROL, STANDARD RGB COLOR
 156   1        ILI9341_WriteCommand(0xB1);
 157   1        ILI9341_WriteData(0x00);
 158   1        ILI9341_WriteData(0x18);
 159   1      
 160   1        //DISPLAY FUNCTION CONTROL
 161   1        ILI9341_WriteCommand(0xB6);
 162   1        ILI9341_WriteData(0x08);
 163   1        ILI9341_WriteData(0x82);
 164   1        ILI9341_WriteData(0x27);
 165   1      
 166   1        //3GAMMA FUNCTION DISABLE
 167   1        ILI9341_WriteCommand(0xF2);
 168   1        ILI9341_WriteData(0x00);
 169   1      
 170   1        //GAMMA CURVE SELECTED
 171   1        ILI9341_WriteCommand(0x26);
 172   1        ILI9341_WriteData(0x01);
 173   1      
 174   1        //POSITIVE GAMMA CORRECTION
 175   1        ILI9341_WriteCommand(0xE0);
 176   1        ILI9341_WriteData(0x0F);
 177   1        ILI9341_WriteData(0x31);
 178   1        ILI9341_WriteData(0x2B);
C51 COMPILER V9.60.7.0   ILI9341                                                           04/14/2025 22:12:06 PAGE 4   

 179   1        ILI9341_WriteData(0x0C);
 180   1        ILI9341_WriteData(0x0E);
 181   1        ILI9341_WriteData(0x08);
 182   1        ILI9341_WriteData(0x4E);
 183   1        ILI9341_WriteData(0xF1);
 184   1        ILI9341_WriteData(0x37);
 185   1        ILI9341_WriteData(0x07);
 186   1        ILI9341_WriteData(0x10);
 187   1        ILI9341_WriteData(0x03);
 188   1        ILI9341_WriteData(0x0E);
 189   1        ILI9341_WriteData(0x09);
 190   1        ILI9341_WriteData(0x00);
 191   1      
 192   1        //NEGATIVE GAMMA CORRECTION
 193   1        ILI9341_WriteCommand(0xE1);
 194   1        ILI9341_WriteData(0x00);
 195   1        ILI9341_WriteData(0x0E);
 196   1        ILI9341_WriteData(0x14);
 197   1        ILI9341_WriteData(0x03);
 198   1        ILI9341_WriteData(0x11);
 199   1        ILI9341_WriteData(0x07);
 200   1        ILI9341_WriteData(0x31);
 201   1        ILI9341_WriteData(0xC1);
 202   1        ILI9341_WriteData(0x48);
 203   1        ILI9341_WriteData(0x08);
 204   1        ILI9341_WriteData(0x0F);
 205   1        ILI9341_WriteData(0x0C);
 206   1        ILI9341_WriteData(0x31);
 207   1        ILI9341_WriteData(0x36);
 208   1        ILI9341_WriteData(0x0F);
 209   1      
 210   1        //EXIT SLEEP
 211   1        ILI9341_WriteCommand(0x11);
 212   1        delay(100);
 213   1      
 214   1        //TURN ON DISPLAY
 215   1        ILI9341_WriteCommand(0x29);
 216   1      
 217   1        //STARTING ROTATION
 218   1        ILI9341_SetRotation(SCREEN_VERTICAL_1);
 219   1      }
 220          
 221          void ILI9341_SetRotation(uint8_t rotation){
 222   1        ILI9341_WriteCommand(0x36);
 223   1        delay(1);
 224   1      
 225   1        switch(rotation){
 226   2        case SCREEN_VERTICAL_1:
 227   2          ILI9341_WriteData(0x40|0x08);
 228   2          LCD_WIDTH = 240;
 229   2          LCD_HEIGHT = 320;
 230   2          break;
 231   2        case SCREEN_HORIZONTAL_1:
 232   2          ILI9341_WriteData(0x20|0x08);
 233   2          LCD_WIDTH  = 320;
 234   2          LCD_HEIGHT = 240;
 235   2          break;
 236   2        case SCREEN_VERTICAL_2:
 237   2          ILI9341_WriteData(0x80|0x08);
 238   2          LCD_WIDTH  = 240;
 239   2          LCD_HEIGHT = 320;
 240   2          break;
C51 COMPILER V9.60.7.0   ILI9341                                                           04/14/2025 22:12:06 PAGE 5   

 241   2        case SCREEN_HORIZONTAL_2:
 242   2          ILI9341_WriteData(0x40|0x80|0x20|0x08);
 243   2          LCD_WIDTH  = 320;
 244   2          LCD_HEIGHT = 240;
 245   2          break;
 246   2        default:
 247   2          break;
 248   2        }
 249   1      }
 250          
 251          
 252          void ILI9341_DrawColor(uint16_t color){
 253   1        uint8_t buffer[2];
 254   1      buffer[0] = color>>8;
 255   1        buffer[1] = color;
 256   1        ILI9341_WriteBuffer(buffer, sizeof(buffer));
 257   1      }
 258          
 259          void ILI9341_DrawColorBurst(uint16_t color, uint32_t siz){
 260   1        uint32_t BufferSize = BURST_MAX_SIZE;
 261   1        uint8_t chifted;
 262   1        uint32_t SendingSize;
 263   1        uint32_t SendingInBlock;
 264   1        uint32_t RemainderFromBlock;
 265   1        uint32_t j;
 266   1        uint8_t BurstBuffer[BURST_MAX_SIZE];
 267   1        
 268   1        /*if((siz*2) < BURST_MAX_SIZE){
 269   1          BufferSize = siz;
 270   1        }
 271   1        else{
 272   1          BufferSize = BURST_MAX_SIZE;
 273   1        }
 274   1        */
 275   1      
 276   1        ILI9341_DC_HIGH;
 277   1        ILI9341_CS_LOW;
 278   1      
 279   1        chifted = color>>8;
 280   1        
 281   1      
 282   1        for(j = 0; j < BufferSize; j+=2){
 283   2          BurstBuffer[j] = chifted;
 284   2          BurstBuffer[j+1] = color;
 285   2        }
 286   1      
 287   1        SendingSize = siz * 2;
 288   1        SendingInBlock = SendingSize / BufferSize;
 289   1        RemainderFromBlock = SendingSize % BufferSize;
 290   1      
 291   1        if(SendingInBlock != 0){
 292   2          for(j = 0; j < SendingInBlock; j++){
 293   3            Spi_Write_Buff(BurstBuffer,BufferSize);
 294   3          }
 295   2        }
 296   1        Spi_Write_Buff(BurstBuffer,RemainderFromBlock);
 297   1        ILI9341_CS_HIGH;
 298   1      }
 299          
 300          void ILI9341_FillScreen(uint16_t color){
 301   1        ILI9341_SetAddress(0, 0, LCD_WIDTH, LCD_HEIGHT);
 302   1        ILI9341_DrawColorBurst(color, LCD_WIDTH*LCD_HEIGHT);
C51 COMPILER V9.60.7.0   ILI9341                                                           04/14/2025 22:12:06 PAGE 6   

 303   1      }
 304          
 305          void ILI9341_DrawPixel(uint16_t x,uint16_t y,uint16_t color){
 306   1        uint8_t bufferX[4];
 307   1        uint8_t bufferY[4];
 308   1        uint8_t bufferC[2];
 309   1        if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 310   1        
 311   1        bufferX[0] = x>>8;
 312   1        bufferX[1] = x;
 313   1        bufferX[2] = (x+1)>>8;
 314   1        bufferX[3] = (x+1);
 315   1        
 316   1        bufferY[0] = y>>8;
 317   1        bufferY[1] = y;
 318   1        bufferY[2] = (y+1)>>8;
 319   1        bufferY[3] = (y+1);
 320   1      
 321   1        bufferC[0] = color>>8;
 322   1        bufferC[1] = color;
 323   1        
 324   1      
 325   1        ILI9341_WriteCommand(0x2A);           //ADDRESS
 326   1        ILI9341_WriteBuffer(bufferX, sizeof(bufferX));  //XDATA
 327   1      
 328   1        ILI9341_WriteCommand(0x2B);           //ADDRESS
 329   1        ILI9341_WriteBuffer(bufferY, sizeof(bufferY));  //YDATA
 330   1      
 331   1        ILI9341_WriteCommand(0x2C);           //ADDRESS
 332   1        ILI9341_WriteBuffer(bufferC, sizeof(bufferC));  //COLOR
 333   1      }
 334          
 335          void ILI9341_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color){
 336   1        if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 337   1      
 338   1        if((x+width-1)>=LCD_WIDTH){
 339   2          width=LCD_WIDTH-x;
 340   2        }
 341   1      
 342   1        if((y+height-1)>=LCD_HEIGHT){
 343   2          height=LCD_HEIGHT-y;
 344   2        }
 345   1      
 346   1        ILI9341_SetAddress(x, y, x+width-1, y+height-1);
 347   1        ILI9341_DrawColorBurst(color, height*width);
 348   1      }
 349          
 350          
 351          void ILI9341_DrawHLine(uint16_t x, uint16_t y, uint16_t width, uint16_t color){
 352   1        if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 353   1      
 354   1        if((x+width-1)>=LCD_WIDTH){
 355   2          width=LCD_WIDTH-x;
 356   2        }
 357   1      
 358   1        ILI9341_SetAddress(x, y, x+width-1, y);
 359   1        ILI9341_DrawColorBurst(color, width);
 360   1      }
 361          
 362          void ILI9341_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,uint16_t color){
 363   1        uint16_t dx,dy;
 364   1        uint16_t err,ystep,xs,dlen;
C51 COMPILER V9.60.7.0   ILI9341                                                           04/14/2025 22:12:06 PAGE 7   

 365   1        uint16_t steep;
 366   1        steep = abs(y1 - y0) > abs(x1 - x0);
 367   1        
 368   1      
 369   1        if (steep) {
 370   2          swap(&x0, &y0);
 371   2          swap(&x1, &y1);
 372   2        }
 373   1      
 374   1        if (x0 > x1) {
 375   2          swap(&x0, &x1);
 376   2          swap(&y0, &y1);
 377   2        }
 378   1      
 379   1        dx = x1 - x0, dy = abs(y1 - y0);;
 380   1      
 381   1        err = dx >> 1, ystep = -1, xs = x0, dlen = 0;
 382   1      
 383   1        if (y0 < y1) ystep = 1;
 384   1      
 385   1        // Split into steep and not steep for FastH/V separation
 386   1        if (steep) {
 387   2          for (; x0 <= x1; x0++) {
 388   3            dlen++;
 389   3            err -= dy;
 390   3            if (err < 0) {
 391   4              if (dlen == 1) ILI9341_DrawPixel(y0, xs, color);
 392   4              else ILI9341_DrawVLine(y0, xs, dlen, color);
 393   4              dlen = 0;
 394   4              y0 += ystep; xs = x0 + 1;
 395   4              err += dx;
 396   4            }
 397   3          }
 398   2          if (dlen) ILI9341_DrawVLine(y0, xs, dlen, color);
 399   2        }
 400   1        else
 401   1        {
 402   2          for (; x0 <= x1; x0++) {
 403   3            dlen++;
 404   3            err -= dy;
 405   3            if (err < 0) {
 406   4              if (dlen == 1) ILI9341_DrawPixel(xs, y0, color);
 407   4              else ILI9341_DrawHLine(xs, y0, dlen, color);
 408   4              dlen = 0;
 409   4              y0 += ystep; xs = x0 + 1;
 410   4              err += dx;
 411   4            }
 412   3          }
 413   2          if (dlen) ILI9341_DrawHLine(xs, y0, dlen, color);
 414   2        }
 415   1      
 416   1      }
 417          
 418          void ILI9341_DrawVLine(uint16_t x, uint16_t y, uint16_t height, uint16_t color){
 419   1        if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 420   1      
 421   1        if((y+height-1)>=LCD_HEIGHT){
 422   2          height=LCD_HEIGHT-y;
 423   2        }
 424   1      
 425   1        ILI9341_SetAddress(x, y, x, y+height-1);
 426   1        ILI9341_DrawColorBurst(color, height);
C51 COMPILER V9.60.7.0   ILI9341                                                           04/14/2025 22:12:06 PAGE 8   

 427   1      }
 428          
 429          void ILI9341_DrawHollowCircle(uint16_t X, uint16_t Y, uint16_t radius, uint16_t color){
 430   1        int x = radius-1;
 431   1        int y = 0;
 432   1        int dx = 1;
 433   1        int dy = 1;
 434   1        int err = dx - (radius << 1);
 435   1      
 436   1        while (x >= y){
 437   2          ILI9341_DrawPixel(X + x, Y + y, color);
 438   2          ILI9341_DrawPixel(X + y, Y + x, color);
 439   2          ILI9341_DrawPixel(X - y, Y + x, color);
 440   2          ILI9341_DrawPixel(X - x, Y + y, color);
 441   2          ILI9341_DrawPixel(X - x, Y - y, color);
 442   2          ILI9341_DrawPixel(X - y, Y - x, color);
 443   2          ILI9341_DrawPixel(X + y, Y - x, color);
 444   2          ILI9341_DrawPixel(X + x, Y - y, color);
 445   2      
 446   2          if (err <= 0){
 447   3            y++;
 448   3            err += dy;
 449   3            dy += 2;
 450   3          }
 451   2      
 452   2          if (err > 0){
 453   3            x--;
 454   3            dx += 2;
 455   3            err += (-radius << 1) + dx;
 456   3          }
 457   2        }
 458   1      }
 459          
 460          void ILI9341_DrawFilledCircle(uint16_t X, uint16_t Y, uint16_t radius, uint16_t color){
 461   1        int x = radius;
 462   1        int y = 0;
 463   1        int xChange = 1 - (radius << 1);
 464   1        int yChange = 0;
 465   1        int radiusError = 0;
 466   1          int i;
 467   1        while (x >= y){
 468   2          for (i = X - x; i <= X + x; i++){
 469   3            ILI9341_DrawPixel(i, Y + y,color);
 470   3            ILI9341_DrawPixel(i, Y - y,color);
 471   3          }
 472   2      
 473   2          for (i = X - y; i <= X + y; i++){
 474   3            ILI9341_DrawPixel(i, Y + x,color);
 475   3            ILI9341_DrawPixel(i, Y - x,color);
 476   3          }
 477   2      
 478   2          y++;
 479   2          radiusError += yChange;
 480   2          yChange += 2;
 481   2      
 482   2          if (((radiusError << 1) + xChange) > 0){
 483   3            x--;
 484   3            radiusError += xChange;
 485   3            xChange += 2;
 486   3          }
 487   2        }
 488   1      }
C51 COMPILER V9.60.7.0   ILI9341                                                           04/14/2025 22:12:06 PAGE 9   

 489          
 490          void ILI9341_DrawHollowRectangle(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t color,uint8_
             -t thickness){
 491   1        uint8_t i;
 492   1        uint16_t xLen = 0;
 493   1        uint16_t yLen = 0;
 494   1        uint8_t negX = 0;
 495   1        uint8_t negY = 0;
 496   1        float negCalc = 0;
 497   1      
 498   1        negCalc = X1 - X0;
 499   1        if(negCalc < 0) negX = 1;
 500   1        negCalc = 0;
 501   1      
 502   1        negCalc = Y1 - Y0;
 503   1        if(negCalc < 0) negY = 1;
 504   1      
 505   1        //DRAW HORIZONTAL!
 506   1        if(!negX){
 507   2          xLen = X1 - X0;
 508   2        }
 509   1        else{
 510   2          xLen = X0 - X1;
 511   2        }
 512   1        
 513   1        for(i=0;i<thickness;i++){
 514   2          ILI9341_DrawHLine(X0, Y0+i, xLen, color);
 515   2          ILI9341_DrawHLine(X0, Y1-i, xLen, color);
 516   2        }
 517   1        
 518   1        
 519   1        
 520   1        // ILI9341_DrawHLine(X0, Y0, xLen, color);
 521   1        // ILI9341_DrawHLine(X0, Y1, xLen, color);
 522   1      
 523   1        //DRAW VERTICAL!
 524   1        if(!negY){
 525   2          yLen = Y1 - Y0;
 526   2        }
 527   1        else{
 528   2          yLen = Y0 - Y1;
 529   2        }
 530   1        
 531   1         for(i=0;i<thickness;i++){
 532   2          ILI9341_DrawVLine(X0+i, Y0, yLen, color);
 533   2          ILI9341_DrawVLine(X1-i, Y0, yLen, color);
 534   2        }    
 535   1        // ILI9341_DrawVLine(X0, Y0, yLen, color);
 536   1        // ILI9341_DrawVLine(X1, Y0, yLen, color);
 537   1      
 538   1        if((xLen > 0)||(yLen > 0)){
 539   2          ILI9341_DrawPixel(X1, Y1, color);
 540   2        }
 541   1      }
 542          
 543          void ILI9341_DrawFilledRectangleCoord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t color){
 544   1        uint16_t xLen = 0;
 545   1        uint16_t yLen = 0;
 546   1        uint8_t negX = 0;
 547   1        uint8_t negY = 0;
 548   1        uint32_t negCalc = 0;
 549   1        uint16_t X0True = 0;
C51 COMPILER V9.60.7.0   ILI9341                                                           04/14/2025 22:12:06 PAGE 10  

 550   1        uint16_t Y0True = 0;
 551   1      
 552   1        negCalc = X1 - X0;
 553   1        if(negCalc < 0) negX = 1;
 554   1        negCalc = 0;
 555   1      
 556   1        negCalc = Y1 - Y0;
 557   1        if(negCalc < 0) negY = 1;
 558   1      
 559   1        if(!negX){
 560   2          xLen = X1 - X0;
 561   2          X0True = X0;
 562   2        }
 563   1        else{
 564   2          xLen = X0 - X1;
 565   2          X0True = X1;
 566   2        }
 567   1      
 568   1        if(!negY){
 569   2          yLen = Y1 - Y0;
 570   2          Y0True = Y0;
 571   2        }
 572   1        else{
 573   2          yLen = Y0 - Y1;
 574   2          Y0True = Y1;
 575   2        }
 576   1      
 577   1        ILI9341_DrawRectangle(X0True, Y0True, xLen, yLen, color);
 578   1      }
 579          
 580          void ILI9341_DrawHollowEllipse(uint16_t x0,uint16_t y0,uint32_t rx,uint32_t ry,uint16_t color){
 581   1        uint32_t x,y;
 582   1          uint32_t rx2 = rx * rx;
 583   1          uint32_t ry2 = ry * ry;
 584   1          uint32_t fx2 = 4 * rx2;
 585   1          uint32_t fy2 = 4 * ry2;
 586   1          uint32_t s;
 587   1          
 588   1          if (rx<2) return;
 589   1          if (ry<2) return;
 590   1      
 591   1          for (x = 0, y = ry, s = 2*ry2+rx2*(1-2*ry); ry2*x <= rx2*y; x++) {
 592   2          // These are ordered to minimise coordinate changes in x or y
 593   2          // drawPixel can then send fewer bounding box commands
 594   2          ILI9341_DrawPixel(x0 + x, y0 + y, color);
 595   2          ILI9341_DrawPixel(x0 - x, y0 + y, color);
 596   2          ILI9341_DrawPixel(x0 - x, y0 - y, color);
 597   2          ILI9341_DrawPixel(x0 + x, y0 - y, color);
 598   2          if (s >= 0) {
 599   3            s += fx2 * (1 - y);
 600   3            y--;
 601   3          }
 602   2          s += ry2 * ((4 * x) + 6);
 603   2         }
 604   1      
 605   1          for (x = rx, y = 0, s = 2*rx2+ry2*(1-2*rx); rx2*y <= ry2*x; y++) {
 606   2          // These are ordered to minimise coordinate changes in x or y
 607   2          // drawPixel can then send fewer bounding box commands
 608   2          ILI9341_DrawPixel(x0 + x, y0 + y, color);
 609   2          ILI9341_DrawPixel(x0 - x, y0 + y, color);
 610   2          ILI9341_DrawPixel(x0 - x, y0 - y, color);
 611   2          ILI9341_DrawPixel(x0 + x, y0 - y, color);
C51 COMPILER V9.60.7.0   ILI9341                                                           04/14/2025 22:12:06 PAGE 11  

 612   2          if (s >= 0){
 613   3            s += fy2 * (1 - x);
 614   3            x--;
 615   3          }
 616   2          s += rx2 * ((4 * y) + 6);
 617   2        }
 618   1      }
 619          
 620          void ILI9341_DrawFilledEllipse(uint16_t x0, uint16_t y0, uint32_t rx, uint32_t ry, uint16_t color){
 621   1        uint32_t x, y;
 622   1        uint32_t rx2 = rx * rx;
 623   1        uint32_t ry2 = ry * ry;
 624   1        uint32_t fx2 = 4 * rx2;
 625   1        uint32_t fy2 = 4 * ry2;
 626   1        uint32_t s;
 627   1      
 628   1        if (rx<2) return;
 629   1        if (ry<2) return;
 630   1      
 631   1        for (x = 0, y = ry, s = 2*ry2+rx2*(1-2*ry); ry2*x <= rx2*y; x++) {
 632   2          ILI9341_DrawHLine(x0 - x, y0 - y, x + x + 1, color);
 633   2          ILI9341_DrawHLine(x0 - x, y0 + y, x + x + 1, color);
 634   2      
 635   2          if (s >= 0) {
 636   3            s += fx2 * (1 - y);
 637   3            y--;
 638   3          }
 639   2          s += ry2 * ((4 * x) + 6);
 640   2        }
 641   1      
 642   1        for (x = rx, y = 0, s = 2*rx2+ry2*(1-2*rx); rx2*y <= ry2*x; y++) {
 643   2          ILI9341_DrawHLine(x0 - x, y0 - y, x + x + 1, color);
 644   2          ILI9341_DrawHLine(x0 - x, y0 + y, x + x + 1, color);
 645   2      
 646   2          if (s >= 0) {
 647   3            s += fy2 * (1 - x);
 648   3            x--;
 649   3          }
 650   2          s += rx2 * ((4 * y) + 6);
 651   2        }
 652   1      
 653   1      }
 654          
 655          
 656          
 657          
 658          
 659          void ILI9341_DrawChar(char ch, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgco
             -lor){
 660   1        uint8_t fOffset, fWidth, fHeight, fBPL;
 661   1        uint8_t *tempChar;
 662   1        int j;
 663   1        int i;
 664   1        uint8_t z,b;
 665   1      
 666   1        if ((ch < 31) || (ch > 127)) return;
 667   1      
 668   1        fOffset = font[0];
 669   1        fWidth = font[1];
 670   1        fHeight = font[2];
 671   1        fBPL = font[3];
 672   1      
C51 COMPILER V9.60.7.0   ILI9341                                                           04/14/2025 22:12:06 PAGE 12  

 673   1        tempChar = (uint8_t*)&font[((ch - 0x20) * fOffset) + 4]; /* Current Character = Meta + (Character Index *
             - Offset) */
 674   1      
 675   1        /* Clear background first */
 676   1        ILI9341_DrawRectangle(X, Y, fWidth, fHeight, bgcolor);
 677   1      
 678   1        for (j=0; j < fHeight; j++)
 679   1        {
 680   2          for (i=0; i < fWidth; i++)
 681   2          {
 682   3            z =  tempChar[fBPL * i + ((j & 0xF8) >> 3) + 1]; /* (j & 0xF8) >> 3, increase one by 8-bits */
 683   3            b = 1 << (j & 0x07);
 684   3            if (( z & b ) != 0x00)
 685   3            {
 686   4              ILI9341_DrawPixel(X+i, Y+j, color);
 687   4            }
 688   3          }
 689   2        }
 690   1      }
 691          
 692          void ILI9341_DrawText(const char* str, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint1
             -6_t bgcolor){
 693   1        uint8_t charWidth;      /* Width of character */
 694   1        uint8_t fOffset = font[0];  /* Offset of character */
 695   1        uint8_t fWidth = font[1]; /* Width of font */
 696   1          uint8_t *tempChar;
 697   1      
 698   1        while (*str)
 699   1        {
 700   2          ILI9341_DrawChar(*str, font, X, Y, color, bgcolor);
 701   2      
 702   2          /* Check character width and calculate proper position */
 703   2          tempChar = (uint8_t*)&font[((*str - 0x20) * fOffset) + 4];
 704   2          charWidth = tempChar[0];
 705   2              
 706   2          if(charWidth + 2 < fWidth)
 707   2          {
 708   3            /* If character width is smaller than font width */
 709   3            X += (charWidth + 2);
 710   3          }
 711   2          else
 712   2          {
 713   3            X += fWidth;
 714   3          }
 715   2      
 716   2          str++;
 717   2        }
 718   1      }
 719          
 720          void ILI9341_DrawImage(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint8_t* image, uint8_t or
             -ientation){
 721   1        uint32_t counter = 0;
 722   1        uint32_t i;
 723   1        if(orientation == SCREEN_HORIZONTAL_1)
 724   1        {
 725   2          ILI9341_SetRotation(SCREEN_HORIZONTAL_1);
 726   2          ILI9341_SetAddress(x,y,x+width-1,y+height-1);
 727   2        }
 728   1        else if(orientation == SCREEN_HORIZONTAL_2)
 729   1        {
 730   2          ILI9341_SetRotation(SCREEN_HORIZONTAL_2);
 731   2          ILI9341_SetAddress(0,0,ILI9341_SCREEN_WIDTH,ILI9341_SCREEN_HEIGHT);
C51 COMPILER V9.60.7.0   ILI9341                                                           04/14/2025 22:12:06 PAGE 13  

 732   2        }
 733   1        else if(orientation == SCREEN_VERTICAL_2)
 734   1        {
 735   2          ILI9341_SetRotation(SCREEN_VERTICAL_2);
 736   2          ILI9341_SetAddress(0,0,ILI9341_SCREEN_HEIGHT,ILI9341_SCREEN_WIDTH);
 737   2        }
 738   1        else if(orientation == SCREEN_VERTICAL_1)
 739   1        {
 740   2          ILI9341_SetRotation(SCREEN_VERTICAL_1);
 741   2          ILI9341_SetAddress(0,0,ILI9341_SCREEN_HEIGHT,ILI9341_SCREEN_WIDTH);
 742   2        }
 743   1      
 744   1        
 745   1        for(i = 0; i < width*height*2/BURST_MAX_SIZE; i++)
 746   1        {
 747   2          ILI9341_WriteBuffer((uint8_t*)(image + counter), BURST_MAX_SIZE);
 748   2          counter += BURST_MAX_SIZE;
 749   2      
 750   2          /* DMA Tx is too fast, It needs some delay */
 751   2          delay(1);
 752   2        }
 753   1      }
 754          
 755          void ILI9341_DrawBMP(uint16_t x,uint16_t y,uint16_t width,uint16_t height,uint8_t* image,uint16_t color,ui
             -nt16_t bg_color){
 756   1        uint16_t i,j;
 757   1        uint8_t k;
 758   1        uint8_t byte;
 759   1        uint8_t bit_bmp;
 760   1        uint8_t buff1[2];
 761   1        uint8_t buff2[2];
 762   1        buff1[0] = color>>8;
 763   1        buff1[1] = color;
 764   1        buff2[0] = bg_color>>8;
 765   1        buff2[1] = bg_color;
 766   1        ILI9341_SetAddress(x, y, x+width-1, y+height-1);
 767   1        ILI9341_DC_HIGH;
 768   1        ILI9341_CS_LOW;
 769   1      
 770   1        for(i=0;i<height;i++){
 771   2            for(j=0;j<(width/8);j++){
 772   3              byte = image[(width/8)*i+j];
 773   3              for(k =0;k<8;k++){
 774   4                bit_bmp = byte>>(7-k) & 1;
 775   4                if(bit_bmp == 1){
 776   5                  Spi_Write_Buff(buff1,2);
 777   5                }
 778   4                else{
 779   5                  Spi_Write_Buff(buff2,2);
 780   5                }
 781   4              }
 782   3      
 783   3            }
 784   2        }
 785   1        ILI9341_CS_HIGH;
 786   1      }
 787          void ILI9341_DrawIcon(uint16_t x, uint16_t y, uint16_t width, uint16_t height,uint16_t* buff,uint16_t siz)
             -{
 788   1        uint32_t BufferSize = BURST_MAX_SIZE;
 789   1        uint32_t SendingSize;
 790   1        uint32_t SendingInBlock;
 791   1        uint32_t RemainderFromBlock;
C51 COMPILER V9.60.7.0   ILI9341                                                           04/14/2025 22:12:06 PAGE 14  

 792   1        uint32_t i,j;
 793   1        uint8_t BurstBuffer[BURST_MAX_SIZE];
 794   1      
 795   1        if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 796   1      
 797   1        if((x+width-1)>=LCD_WIDTH){
 798   2          width=LCD_WIDTH-x;
 799   2        }
 800   1      
 801   1        if((y+height-1)>=LCD_HEIGHT){
 802   2          height=LCD_HEIGHT-y;
 803   2        }
 804   1      
 805   1        ILI9341_SetAddress(x, y, x+width-1, y+height-1);
 806   1      
 807   1        ILI9341_DC_HIGH;
 808   1        ILI9341_CS_LOW;
 809   1        SendingSize = siz * 2;
 810   1        SendingInBlock = SendingSize / BufferSize;
 811   1        RemainderFromBlock = SendingSize % BufferSize;
 812   1        
 813   1        for(i=0;i<SendingInBlock;i++){
 814   2           for(j=0;j<250;j++){
 815   3            BurstBuffer[2 * j] = buff[250*i+j]>>8;
 816   3            BurstBuffer[2 * j + 1] = buff[250*i+j];
 817   3           }
 818   2           Spi_Write_Buff(BurstBuffer,BufferSize);
 819   2        }
 820   1      
 821   1        for(j=0;j<(RemainderFromBlock/2);j++){
 822   2          BurstBuffer[2 * j] = buff[250*SendingInBlock+j]>>8;
 823   2          BurstBuffer[2 * j + 1] = buff[250*SendingInBlock+j];
 824   2        }
 825   1        Spi_Write_Buff(BurstBuffer,RemainderFromBlock);
 826   1        ILI9341_CS_HIGH;
 827   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =  10949    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      8    1404
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
